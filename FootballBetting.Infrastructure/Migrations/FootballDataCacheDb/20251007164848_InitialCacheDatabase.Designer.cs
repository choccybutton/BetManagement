// <auto-generated />
using System;
using FootballBetting.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FootballBetting.Infrastructure.Migrations.FootballDataCacheDb
{
    [DbContext(typeof(FootballDataCacheDbContext))]
    [Migration("20251007164848_InitialCacheDatabase")]
    partial class InitialCacheDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CachedFixtureCachedPlayer", b =>
                {
                    b.Property<int>("FixturesId")
                        .HasColumnType("int");

                    b.Property<int>("PlayersId")
                        .HasColumnType("int");

                    b.HasKey("FixturesId", "PlayersId");

                    b.HasIndex("PlayersId");

                    b.ToTable("CachedFixtureCachedPlayer");
                });

            modelBuilder.Entity("FootballBetting.Domain.Entities.Cache.ApiUsageLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("CacheHit")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CostCurrency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Endpoint")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("HttpMethod")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Parameters")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int?>("RateLimitRemaining")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RateLimitReset")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RequestTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("ResponseSize")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<TimeSpan>("ResponseTime")
                        .HasColumnType("time");

                    b.Property<int>("StatusCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Endpoint");

                    b.HasIndex("RequestTimestamp");

                    b.ToTable("ApiUsageLogs");
                });

            modelBuilder.Entity("FootballBetting.Domain.Entities.Cache.CacheMetadata", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApiCallCount")
                        .HasColumnType("int");

                    b.Property<int?>("CacheHitCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CachedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("EntityKey")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsStale")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastAccessed")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastApiCall")
                        .HasColumnType("datetime2");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ExpiresAt");

                    b.HasIndex("EntityType", "EntityKey")
                        .IsUnique();

                    b.ToTable("CacheMetadata");
                });

            modelBuilder.Entity("FootballBetting.Domain.Entities.Cache.CachedCountry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CachedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Flag")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("FootballBetting.Domain.Entities.Cache.CachedFixture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApiFootballId")
                        .HasColumnType("int");

                    b.Property<int?>("AwayGoals")
                        .HasColumnType("int");

                    b.Property<int>("AwayTeamId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CachedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ExtraTimeAwayGoals")
                        .HasColumnType("int");

                    b.Property<int?>("ExtraTimeHomeGoals")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FirstPeriod")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FullTimeAwayGoals")
                        .HasColumnType("int");

                    b.Property<int?>("FullTimeHomeGoals")
                        .HasColumnType("int");

                    b.Property<int?>("HalfTimeAwayGoals")
                        .HasColumnType("int");

                    b.Property<int?>("HalfTimeHomeGoals")
                        .HasColumnType("int");

                    b.Property<int?>("HomeGoals")
                        .HasColumnType("int");

                    b.Property<int>("HomeTeamId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("LeagueId")
                        .HasColumnType("int");

                    b.Property<int?>("PenaltyAwayGoals")
                        .HasColumnType("int");

                    b.Property<int?>("PenaltyHomeGoals")
                        .HasColumnType("int");

                    b.Property<string>("Referee")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("SecondPeriod")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StatusElapsed")
                        .HasColumnType("int");

                    b.Property<string>("StatusLong")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StatusShort")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("Timestamp")
                        .HasColumnType("bigint");

                    b.Property<string>("Timezone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("VenueId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApiFootballId")
                        .IsUnique();

                    b.HasIndex("AwayTeamId");

                    b.HasIndex("Date");

                    b.HasIndex("HomeTeamId");

                    b.HasIndex("LeagueId");

                    b.HasIndex("VenueId");

                    b.ToTable("Fixtures");
                });

            modelBuilder.Entity("FootballBetting.Domain.Entities.Cache.CachedLeague", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApiFootballId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CachedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ApiFootballId")
                        .IsUnique();

                    b.HasIndex("CountryId");

                    b.HasIndex("Name");

                    b.ToTable("Leagues");
                });

            modelBuilder.Entity("FootballBetting.Domain.Entities.Cache.CachedPlayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("ApiFootballId")
                        .HasColumnType("int");

                    b.Property<string>("BirthCountry")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BirthPlace")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CachedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("CurrentTeamId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Height")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("Injured")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Weight")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("ApiFootballId")
                        .IsUnique();

                    b.HasIndex("CurrentTeamId");

                    b.HasIndex("Name");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("FootballBetting.Domain.Entities.Cache.CachedPlayerStatistic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CachedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool?>("Captain")
                        .HasColumnType("bit");

                    b.Property<int?>("CardsRed")
                        .HasColumnType("int");

                    b.Property<int?>("CardsYellow")
                        .HasColumnType("int");

                    b.Property<int?>("CardsYellowRed")
                        .HasColumnType("int");

                    b.Property<int?>("DribblesAttempts")
                        .HasColumnType("int");

                    b.Property<int?>("DribblesPast")
                        .HasColumnType("int");

                    b.Property<int?>("DribblesSuccess")
                        .HasColumnType("int");

                    b.Property<int?>("DuelsTotal")
                        .HasColumnType("int");

                    b.Property<int?>("DuelsWon")
                        .HasColumnType("int");

                    b.Property<int?>("FoulsCommitted")
                        .HasColumnType("int");

                    b.Property<int?>("FoulsDrawn")
                        .HasColumnType("int");

                    b.Property<int?>("GamesAppearances")
                        .HasColumnType("int");

                    b.Property<int?>("GamesLineups")
                        .HasColumnType("int");

                    b.Property<int?>("GamesMinutes")
                        .HasColumnType("int");

                    b.Property<int?>("GamesNumber")
                        .HasColumnType("int");

                    b.Property<int?>("GoalsAssists")
                        .HasColumnType("int");

                    b.Property<int?>("GoalsConceded")
                        .HasColumnType("int");

                    b.Property<int?>("GoalsSaves")
                        .HasColumnType("int");

                    b.Property<int?>("GoalsTotal")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LeagueId")
                        .HasColumnType("int");

                    b.Property<int?>("PassesAccuracy")
                        .HasColumnType("int");

                    b.Property<int?>("PassesKey")
                        .HasColumnType("int");

                    b.Property<int?>("PassesTotal")
                        .HasColumnType("int");

                    b.Property<int?>("PenaltyCommitted")
                        .HasColumnType("int");

                    b.Property<int?>("PenaltyMissed")
                        .HasColumnType("int");

                    b.Property<int?>("PenaltySaved")
                        .HasColumnType("int");

                    b.Property<int?>("PenaltyScored")
                        .HasColumnType("int");

                    b.Property<int?>("PenaltyWon")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Rating")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("SeasonId")
                        .HasColumnType("int");

                    b.Property<int?>("ShotsOn")
                        .HasColumnType("int");

                    b.Property<int?>("ShotsTotal")
                        .HasColumnType("int");

                    b.Property<int?>("SubstitutesBench")
                        .HasColumnType("int");

                    b.Property<int?>("SubstitutesIn")
                        .HasColumnType("int");

                    b.Property<int?>("SubstitutesOut")
                        .HasColumnType("int");

                    b.Property<int?>("TacklesBlocks")
                        .HasColumnType("int");

                    b.Property<int?>("TacklesInterceptions")
                        .HasColumnType("int");

                    b.Property<int?>("TacklesTotal")
                        .HasColumnType("int");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LeagueId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("TeamId");

                    b.HasIndex("PlayerId", "SeasonId", "LeagueId", "TeamId")
                        .IsUnique()
                        .HasFilter("[SeasonId] IS NOT NULL AND [LeagueId] IS NOT NULL AND [TeamId] IS NOT NULL");

                    b.ToTable("PlayerStatistics");
                });

            modelBuilder.Entity("FootballBetting.Domain.Entities.Cache.CachedSeason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CachedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("Current")
                        .HasColumnType("bit");

                    b.Property<string>("End")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("LeagueId")
                        .HasColumnType("int");

                    b.Property<string>("Start")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LeagueId", "Year")
                        .IsUnique();

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("FootballBetting.Domain.Entities.Cache.CachedTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApiFootballId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CachedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Founded")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("National")
                        .HasColumnType("bit");

                    b.Property<int?>("VenueId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApiFootballId")
                        .IsUnique();

                    b.HasIndex("Name");

                    b.HasIndex("VenueId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("FootballBetting.Domain.Entities.Cache.CachedVenue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ApiFootballId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CachedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Surface")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ApiFootballId")
                        .IsUnique();

                    b.ToTable("Venues");
                });

            modelBuilder.Entity("CachedFixtureCachedPlayer", b =>
                {
                    b.HasOne("FootballBetting.Domain.Entities.Cache.CachedFixture", null)
                        .WithMany()
                        .HasForeignKey("FixturesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FootballBetting.Domain.Entities.Cache.CachedPlayer", null)
                        .WithMany()
                        .HasForeignKey("PlayersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FootballBetting.Domain.Entities.Cache.CachedFixture", b =>
                {
                    b.HasOne("FootballBetting.Domain.Entities.Cache.CachedTeam", "AwayTeam")
                        .WithMany()
                        .HasForeignKey("AwayTeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FootballBetting.Domain.Entities.Cache.CachedTeam", "HomeTeam")
                        .WithMany()
                        .HasForeignKey("HomeTeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FootballBetting.Domain.Entities.Cache.CachedLeague", "League")
                        .WithMany()
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FootballBetting.Domain.Entities.Cache.CachedVenue", "Venue")
                        .WithMany("HomeFixtures")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("AwayTeam");

                    b.Navigation("HomeTeam");

                    b.Navigation("League");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("FootballBetting.Domain.Entities.Cache.CachedLeague", b =>
                {
                    b.HasOne("FootballBetting.Domain.Entities.Cache.CachedCountry", "Country")
                        .WithMany("Leagues")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Country");
                });

            modelBuilder.Entity("FootballBetting.Domain.Entities.Cache.CachedPlayer", b =>
                {
                    b.HasOne("FootballBetting.Domain.Entities.Cache.CachedTeam", "CurrentTeam")
                        .WithMany()
                        .HasForeignKey("CurrentTeamId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CurrentTeam");
                });

            modelBuilder.Entity("FootballBetting.Domain.Entities.Cache.CachedPlayerStatistic", b =>
                {
                    b.HasOne("FootballBetting.Domain.Entities.Cache.CachedLeague", "League")
                        .WithMany()
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FootballBetting.Domain.Entities.Cache.CachedPlayer", "Player")
                        .WithMany("Statistics")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FootballBetting.Domain.Entities.Cache.CachedSeason", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FootballBetting.Domain.Entities.Cache.CachedTeam", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("League");

                    b.Navigation("Player");

                    b.Navigation("Season");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("FootballBetting.Domain.Entities.Cache.CachedSeason", b =>
                {
                    b.HasOne("FootballBetting.Domain.Entities.Cache.CachedLeague", "League")
                        .WithMany("Seasons")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("League");
                });

            modelBuilder.Entity("FootballBetting.Domain.Entities.Cache.CachedTeam", b =>
                {
                    b.HasOne("FootballBetting.Domain.Entities.Cache.CachedVenue", "Venue")
                        .WithMany("Teams")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("FootballBetting.Domain.Entities.Cache.CachedCountry", b =>
                {
                    b.Navigation("Leagues");
                });

            modelBuilder.Entity("FootballBetting.Domain.Entities.Cache.CachedLeague", b =>
                {
                    b.Navigation("Seasons");
                });

            modelBuilder.Entity("FootballBetting.Domain.Entities.Cache.CachedPlayer", b =>
                {
                    b.Navigation("Statistics");
                });

            modelBuilder.Entity("FootballBetting.Domain.Entities.Cache.CachedVenue", b =>
                {
                    b.Navigation("HomeFixtures");

                    b.Navigation("Teams");
                });
#pragma warning restore 612, 618
        }
    }
}
