@page "/usage-statistics"
@using FootballBetting.Web.Services
@inject IApiUsageService UsageService
@inject NavigationManager Navigation
@implements IDisposable

<PageTitle>API Usage Statistics</PageTitle>

<div class="usage-statistics-page">
    <div class="page-header">
        <h1>API Usage Statistics</h1>
        <button class="btn btn-secondary" @onclick="NavigateBack">
            <span class="bi bi-arrow-left"></span> Back
        </button>
    </div>

    <div class="statistics-grid">
        <!-- Overview Card -->
        <div class="stat-card overview-card">
            <h3>Today's Usage</h3>
            <div class="usage-overview">
                <div class="usage-meter-large">
                    <div class="progress-ring" style="--progress: @GetUsagePercentage()%;">
                        <div class="progress-text">
                            <span class="usage-count">@_statistics.TotalRequests</span>
                            <span class="usage-limit">of @_statistics.DailyLimit</span>
                        </div>
                    </div>
                </div>
                <div class="usage-details">
                    <div class="detail-item">
                        <span class="label">Remaining:</span>
                        <span class="value">@_statistics.RemainingRequests</span>
                    </div>
                    <div class="detail-item">
                        <span class="label">Usage:</span>
                        <span class="value">@GetUsagePercentage().ToString("F1")%</span>
                    </div>
                    <div class="detail-item">
                        <span class="label">Reset Time:</span>
                        <span class="value">@(_statistics.RateLimitReset?.ToString("HH:mm") ?? "Unknown")</span>
                    </div>
                </div>
            </div>
        </div>

        <!-- Quick Stats -->
        <div class="stat-card">
            <h3>Quick Stats</h3>
            <div class="quick-stats">
                <div class="quick-stat success">
                    <span class="stat-number">@GetSuccessfulRequests()</span>
                    <span class="stat-label">Successful</span>
                </div>
                <div class="quick-stat error">
                    <span class="stat-number">@GetFailedRequests()</span>
                    <span class="stat-label">Failed</span>
                </div>
                <div class="quick-stat">
                    <span class="stat-number">@GetAverageResponseTime()ms</span>
                    <span class="stat-label">Avg Response</span>
                </div>
            </div>
        </div>

        <!-- Endpoint Usage -->
        <div class="stat-card">
            <h3>Endpoint Usage</h3>
            <div class="endpoint-list">
                @foreach (var endpoint in GetEndpointUsage())
                {
                    <div class="endpoint-item">
                        <div class="endpoint-info">
                            <span class="endpoint-name">@endpoint.Key</span>
                            <span class="endpoint-count">@endpoint.Value</span>
                        </div>
                        <div class="endpoint-bar">
                            <div class="endpoint-progress" style="width: @(GetEndpointPercentage(endpoint.Value))%"></div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- Recent Requests Table -->
    <div class="stat-card recent-requests">
        <h3>Recent Requests</h3>
        <div class="table-container">
            <table class="requests-table">
                <thead>
                    <tr>
                        <th>Time</th>
                        <th>Endpoint</th>
                        <th>Status</th>
                        <th>Response Time</th>
                        <th>Error</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var request in _statistics.RecentRequests.Take(20))
                    {
                        <tr class="@(request.IsSuccess ? "success-row" : "error-row")">
                            <td>@request.Timestamp.ToString("HH:mm:ss")</td>
                            <td>@request.Endpoint</td>
                            <td>
                                <span class="status-badge @(request.IsSuccess ? "status-success" : "status-error")">
                                    @(request.IsSuccess ? "Success" : "Error")
                                </span>
                            </td>
                            <td>@request.ResponseTime ms</td>
                            <td>@(request.ErrorMessage ?? "-")</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    private ExtendedApiUsageStatistics _statistics = new();
    
    protected override async Task OnInitializedAsync()
    {
        _statistics = UsageService.GetUsageStatistics();
        UsageService.UsageUpdated += OnUsageUpdated;
        await base.OnInitializedAsync();
    }

    private void OnUsageUpdated(object? sender, ExtendedApiUsageStatistics statistics)
    {
        _statistics = statistics;
        InvokeAsync(StateHasChanged);
    }

    private void NavigateBack()
    {
        Navigation.NavigateTo("/");
    }

    private double GetUsagePercentage()
    {
        if (_statistics.DailyLimit == 0) return 0;
        return Math.Min(100, (_statistics.TotalRequests * 100.0) / _statistics.DailyLimit);
    }

    private int GetSuccessfulRequests()
    {
        return _statistics.TotalRequests - (int)_statistics.FailedRequests;
    }

    private int GetFailedRequests()
    {
        return (int)_statistics.FailedRequests;
    }

    private int GetAverageResponseTime()
    {
        return (int)_statistics.AverageResponseTime;
    }

    private Dictionary<string, int> GetEndpointUsage()
    {
        return _statistics.RecentRequests
            .GroupBy(r => r.Endpoint)
            .ToDictionary(g => g.Key, g => g.Count())
            .OrderByDescending(kvp => kvp.Value)
            .Take(10)
            .ToDictionary(kvp => kvp.Key, kvp => kvp.Value);
    }

    private double GetEndpointPercentage(int count)
    {
        var maxCount = GetEndpointUsage().Values.DefaultIfEmpty(0).Max();
        return maxCount > 0 ? (count * 100.0) / maxCount : 0;
    }

    public void Dispose()
    {
        UsageService.UsageUpdated -= OnUsageUpdated;
    }
}

<style>
    .usage-statistics-page {
        padding: 20px;
        max-width: 1200px;
        margin: 0 auto;
    }

    .page-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 30px;
        padding-bottom: 20px;
        border-bottom: 1px solid #dee2e6;
    }

    .page-header h1 {
        margin: 0;
        color: #2c3e50;
    }

    .statistics-grid {
        display: grid;
        grid-template-columns: 2fr 1fr 1fr;
        gap: 20px;
        margin-bottom: 30px;
    }

    @@media (max-width: 768px) {
        .statistics-grid {
            grid-template-columns: 1fr;
        }
    }

    .stat-card {
        background: white;
        border-radius: 12px;
        padding: 24px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        border: 1px solid #e9ecef;
    }

    .stat-card h3 {
        margin: 0 0 20px 0;
        color: #2c3e50;
        font-size: 18px;
        font-weight: 600;
    }

    .usage-overview {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 20px;
    }

    .usage-meter-large {
        position: relative;
    }

    .progress-ring {
        width: 120px;
        height: 120px;
        border-radius: 50%;
        background: conic-gradient(#007bff 0% var(--progress), #e9ecef var(--progress) 100%);
        display: flex;
        align-items: center;
        justify-content: center;
        position: relative;
    }

    .progress-ring::before {
        content: '';
        position: absolute;
        width: 80px;
        height: 80px;
        border-radius: 50%;
        background: white;
    }

    .progress-text {
        position: relative;
        z-index: 1;
        text-align: center;
        display: flex;
        flex-direction: column;
    }

    .usage-count {
        font-size: 24px;
        font-weight: bold;
        color: #2c3e50;
    }

    .usage-limit {
        font-size: 12px;
        color: #6c757d;
    }

    .usage-details {
        display: flex;
        flex-direction: column;
        gap: 8px;
        width: 100%;
    }

    .detail-item {
        display: flex;
        justify-content: space-between;
        padding: 8px 0;
        border-bottom: 1px solid #f8f9fa;
    }

    .detail-item:last-child {
        border-bottom: none;
    }

    .label {
        color: #6c757d;
        font-size: 14px;
    }

    .value {
        font-weight: 600;
        color: #2c3e50;
        font-size: 14px;
    }

    .quick-stats {
        display: flex;
        flex-direction: column;
        gap: 16px;
    }

    .quick-stat {
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 16px;
        border-radius: 8px;
        background: #f8f9fa;
        border: 1px solid #e9ecef;
    }

    .quick-stat.success {
        background: #d4edda;
        border-color: #c3e6cb;
    }

    .quick-stat.error {
        background: #f8d7da;
        border-color: #f5c6cb;
    }

    .stat-number {
        font-size: 24px;
        font-weight: bold;
        color: #2c3e50;
    }

    .success .stat-number {
        color: #155724;
    }

    .error .stat-number {
        color: #721c24;
    }

    .stat-label {
        font-size: 12px;
        color: #6c757d;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .endpoint-list {
        display: flex;
        flex-direction: column;
        gap: 12px;
    }

    .endpoint-item {
        display: flex;
        flex-direction: column;
        gap: 4px;
    }

    .endpoint-info {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .endpoint-name {
        font-size: 14px;
        color: #2c3e50;
        font-family: 'Courier New', monospace;
    }

    .endpoint-count {
        font-size: 14px;
        font-weight: 600;
        color: #007bff;
    }

    .endpoint-bar {
        height: 4px;
        background: #e9ecef;
        border-radius: 2px;
        overflow: hidden;
    }

    .endpoint-progress {
        height: 100%;
        background: #007bff;
        transition: width 0.3s ease;
    }

    .recent-requests {
        grid-column: 1 / -1;
    }

    .table-container {
        overflow-x: auto;
    }

    .requests-table {
        width: 100%;
        border-collapse: collapse;
        font-size: 14px;
    }

    .requests-table th {
        background: #f8f9fa;
        padding: 12px;
        text-align: left;
        border-bottom: 2px solid #dee2e6;
        color: #2c3e50;
        font-weight: 600;
    }

    .requests-table td {
        padding: 12px;
        border-bottom: 1px solid #e9ecef;
    }

    .success-row {
        background: rgba(40, 167, 69, 0.05);
    }

    .error-row {
        background: rgba(220, 53, 69, 0.05);
    }

    .status-badge {
        padding: 4px 8px;
        border-radius: 4px;
        font-size: 12px;
        font-weight: 600;
        text-transform: uppercase;
    }

    .status-success {
        background: #d4edda;
        color: #155724;
    }

    .status-error {
        background: #f8d7da;
        color: #721c24;
    }
</style>