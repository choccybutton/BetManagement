@page "/fixtures/{FixtureId:int}"
@page "/fixture/{FixtureId:int}"
@rendermode InteractiveServer
@using FootballBetting.Web.Services
@using FootballAPIWrapper.Models
@inject FootballApiService FootballApi
@inject NavigationManager Navigation
@inject ILogger<FixtureDetail> Logger

<PageTitle>@GetPageTitle()</PageTitle>

<div class="container-fluid">
    <!-- Back Button -->
    <div class="row mb-3">
        <div class="col">
            <button class="btn btn-outline-secondary" @onclick="GoBack">
                <i class="bi bi-arrow-left me-2"></i>Back to Fixtures
            </button>
        </div>
    </div>

    @if (loading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading fixture details...</span>
            </div>
            <div class="mt-2">Loading fixture details...</div>
        </div>
    }
    else if (error || fixture == null)
    {
        <div class="alert alert-danger">
            <i class="bi bi-exclamation-triangle me-2"></i>
            <strong>Error:</strong> @(error ? "Unable to load fixture details." : "Fixture not found.")
            <button class="btn btn-outline-danger btn-sm ms-2" @onclick="LoadFixtureDetails">
                <i class="bi bi-arrow-clockwise me-1"></i>Retry
            </button>
        </div>
    }
    else
    {
        <!-- Main Fixture Info -->
        <div class="row mb-4">
            <div class="col">
                <div class="card">
                    <div class="card-body">
                        <div class="row align-items-center">
                            <div class="col-md-4 text-center">
                                <div class="team-section">
                                    <img src="@fixture.Teams.Home.Logo" alt="@fixture.Teams.Home.Name" class="team-logo-large mb-2" />
                                    <h4 class="@(fixture.Teams.Home.Winner == true ? "fw-bold text-success" : "")">@fixture.Teams.Home.Name</h4>
                                </div>
                            </div>
                            <div class="col-md-4 text-center">
                                <div class="match-center">
                                    @if (fixture.Goals.Home.HasValue && fixture.Goals.Away.HasValue)
                                    {
                                        <div class="score-display">
                                            <span class="score-number">@fixture.Goals.Home</span>
                                            <span class="score-separator">-</span>
                                            <span class="score-number">@fixture.Goals.Away</span>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="score-display">
                                            <span class="text-muted fs-3">VS</span>
                                        </div>
                                    }
                                    <div class="match-status mt-2">
                                        <span class="badge @GetStatusBadgeClass(fixture.Fixture.Status.Short) fs-6">
                                            @GetStatusText(fixture.Fixture.Status.Short)
                                        </span>
                                        @if (fixture.Fixture.Status.Elapsed.HasValue)
                                        {
                                            <div class="small text-muted mt-1">@(fixture.Fixture.Status.Elapsed)'</div>
                                        }
                                    </div>
                                    <div class="match-time mt-2">
                                        <div class="fw-semibold">@fixture.Fixture.Date.ToString("HH:mm")</div>
                                        <div class="text-muted">@fixture.Fixture.Date.ToString("dddd, dd MMMM yyyy")</div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4 text-center">
                                <div class="team-section">
                                    <img src="@fixture.Teams.Away.Logo" alt="@fixture.Teams.Away.Name" class="team-logo-large mb-2" />
                                    <h4 class="@(fixture.Teams.Away.Winner == true ? "fw-bold text-success" : "")">@fixture.Teams.Away.Name</h4>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- League and Venue Info -->
        <div class="row mb-4">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0"><i class="bi bi-trophy me-2"></i>League Information</h5>
                    </div>
                    <div class="card-body">
                        <div class="d-flex align-items-center">
                            <img src="@fixture.League.Logo" alt="@fixture.League.Name" class="league-logo-large me-3" />
                            <div>
                                <h6 class="mb-1">@fixture.League.Name</h6>
                                <p class="text-muted mb-0">@fixture.League.Country.Name</p>
                                <small class="text-muted">@fixture.League.Type</small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0"><i class="bi bi-geo-alt me-2"></i>Venue Information</h5>
                    </div>
                    <div class="card-body">
                        @if (fixture.Fixture.Venue != null)
                        {
                            <h6 class="mb-1">@fixture.Fixture.Venue.Name</h6>
                            <p class="text-muted mb-1">@fixture.Fixture.Venue.City</p>
                            @if (!string.IsNullOrEmpty(fixture.Fixture.Venue.Address))
                            {
                                <p class="text-muted mb-1">@fixture.Fixture.Venue.Address</p>
                            }
                            @if (fixture.Fixture.Venue.Capacity.HasValue)
                            {
                                <small class="text-muted">Capacity: @fixture.Fixture.Venue.Capacity.Value.ToString("N0")</small>
                            }
                        }
                        else
                        {
                            <p class="text-muted">Venue information not available</p>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Match Details -->
        <div class="row mb-4">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0"><i class="bi bi-clock me-2"></i>Match Details</h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-6">
                                <strong>Fixture ID:</strong>
                            </div>
                            <div class="col-6">
                                @fixture.Fixture.Id
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-6">
                                <strong>Date & Time:</strong>
                            </div>
                            <div class="col-6">
                                @fixture.Fixture.Date.ToString("dd/MM/yyyy HH:mm")
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-6">
                                <strong>Timezone:</strong>
                            </div>
                            <div class="col-6">
                                @(fixture.Fixture.Timezone ?? "UTC")
                            </div>
                        </div>
                        @if (!string.IsNullOrEmpty(fixture.Fixture.Referee))
                        {
                            <div class="row">
                                <div class="col-6">
                                    <strong>Referee:</strong>
                                </div>
                                <div class="col-6">
                                    @fixture.Fixture.Referee
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
            
            @if (fixture.Score != null && HasScoreData(fixture.Score))
            {
                <div class="col-md-6">
                    <div class="card">
                        <div class="card-header">
                            <h5 class="mb-0"><i class="bi bi-bar-chart me-2"></i>Score Breakdown</h5>
                        </div>
                        <div class="card-body">
                            @if (fixture.Score.Halftime?.Home.HasValue == true)
                            {
                                <div class="row mb-2">
                                    <div class="col-6">
                                        <strong>Half Time:</strong>
                                    </div>
                                    <div class="col-6">
                                        @fixture.Score.Halftime.Home - @fixture.Score.Halftime.Away
                                    </div>
                                </div>
                            }
                            @if (fixture.Score.Fulltime?.Home.HasValue == true)
                            {
                                <div class="row mb-2">
                                    <div class="col-6">
                                        <strong>Full Time:</strong>
                                    </div>
                                    <div class="col-6">
                                        @fixture.Score.Fulltime.Home - @fixture.Score.Fulltime.Away
                                    </div>
                                </div>
                            }
                            @if (fixture.Score.Extratime?.Home.HasValue == true)
                            {
                                <div class="row mb-2">
                                    <div class="col-6">
                                        <strong>Extra Time:</strong>
                                    </div>
                                    <div class="col-6">
                                        @fixture.Score.Extratime.Home - @fixture.Score.Extratime.Away
                                    </div>
                                </div>
                            }
                            @if (fixture.Score.Penalty?.Home.HasValue == true)
                            {
                                <div class="row">
                                    <div class="col-6">
                                        <strong>Penalties:</strong>
                                    </div>
                                    <div class="col-6">
                                        @fixture.Score.Penalty.Home - @fixture.Score.Penalty.Away
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
        
        <!-- Head-to-Head Data -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0"><i class="bi bi-clock-history me-2"></i>Head-to-Head History</h5>
                    </div>
                    <div class="card-body">
                        @if (h2hLoading)
                        {
                            <div class="text-center py-3">
                                <div class="spinner-border spinner-border-sm text-primary me-2" role="status">
                                    <span class="visually-hidden">Loading head-to-head data...</span>
                                </div>
                                <small class="text-muted">Loading historical data...</small>
                            </div>
                        }
                        else if (h2hError)
                        {
                            <div class="alert alert-warning">
                                <i class="bi bi-exclamation-triangle me-2"></i>
                                Unable to load head-to-head data.
                                <button class="btn btn-outline-warning btn-sm ms-2" @onclick="LoadHeadToHeadData">
                                    <i class="bi bi-arrow-clockwise me-1"></i>Retry
                                </button>
                            </div>
                        }
                        else
                        {
                            <div class="row">
                                <!-- Same Configuration H2H -->
                                <div class="col-md-6">
                                    <h6 class="fw-bold mb-3">
                                        <i class="bi bi-house me-1"></i>@fixture.Teams.Home.Name (Home) vs @fixture.Teams.Away.Name (Away)
                                    </h6>
                                    @if (sameConfigH2H.Any())
                                    {
                                        <div class="h2h-matches">
                                            @foreach (var match in sameConfigH2H)
                                            {
                                                <div class="h2h-match mb-2">
                                                    <div class="d-flex justify-content-between align-items-center p-2 border rounded">
                                                        <div class="d-flex align-items-center">
                                                            <img src="@match.Teams.Home.Logo" alt="@match.Teams.Home.Name" class="h2h-team-logo me-2" />
                                                            <div>
                                                                <div class="fw-semibold small">@match.Teams.Home.Name</div>
                                                                <div class="small text-muted">vs @match.Teams.Away.Name</div>
                                                            </div>
                                                        </div>
                                                        <div class="text-center">
                                                            <div class="fw-bold">@match.Goals.Home - @match.Goals.Away</div>
                                                            <div class="small text-muted">@match.Fixture.Date.ToString("dd/MM/yyyy")</div>
                                                        </div>
                                                        <div class="text-end">
                                                            <img src="@match.Teams.Away.Logo" alt="@match.Teams.Away.Name" class="h2h-team-logo" />
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="text-muted small">
                                            <i class="bi bi-info-circle me-1"></i>No recent matches with this configuration
                                        </div>
                                    }
                                </div>
                                
                                <!-- Opposite Configuration H2H -->
                                <div class="col-md-6">
                                    <h6 class="fw-bold mb-3">
                                        <i class="bi bi-arrow-left-right me-1"></i>@fixture.Teams.Away.Name (Home) vs @fixture.Teams.Home.Name (Away)
                                    </h6>
                                    @if (oppositeConfigH2H.Any())
                                    {
                                        <div class="h2h-matches">
                                            @foreach (var match in oppositeConfigH2H)
                                            {
                                                <div class="h2h-match mb-2">
                                                    <div class="d-flex justify-content-between align-items-center p-2 border rounded">
                                                        <div class="d-flex align-items-center">
                                                            <img src="@match.Teams.Home.Logo" alt="@match.Teams.Home.Name" class="h2h-team-logo me-2" />
                                                            <div>
                                                                <div class="fw-semibold small">@match.Teams.Home.Name</div>
                                                                <div class="small text-muted">vs @match.Teams.Away.Name</div>
                                                            </div>
                                                        </div>
                                                        <div class="text-center">
                                                            <div class="fw-bold">@match.Goals.Home - @match.Goals.Away</div>
                                                            <div class="small text-muted">@match.Fixture.Date.ToString("dd/MM/yyyy")</div>
                                                        </div>
                                                        <div class="text-end">
                                                            <img src="@match.Teams.Away.Logo" alt="@match.Teams.Away.Name" class="h2h-team-logo" />
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="text-muted small">
                                            <i class="bi bi-info-circle me-1"></i>No recent matches with this configuration
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<style>
    .team-logo-large {
        width: 80px;
        height: 80px;
        object-fit: contain;
    }
    
    .league-logo-large {
        width: 48px;
        height: 48px;
        object-fit: contain;
    }
    
    .score-display {
        font-size: 3rem;
        font-weight: bold;
        color: #0d6efd;
    }
    
    .score-number {
        margin: 0 0.5rem;
    }
    
    .score-separator {
        color: #6c757d;
    }
    
    .match-center {
        padding: 1rem 0;
    }
    
    .team-section {
        padding: 1rem 0;
    }
    
    .card-header h5 {
        font-size: 1.1rem;
    }
    
    .h2h-team-logo {
        width: 24px;
        height: 24px;
        object-fit: contain;
    }
    
    .h2h-match {
        transition: background-color 0.2s ease;
    }
    
    .h2h-match:hover {
        background-color: rgba(13, 110, 253, 0.05);
    }
    
    .h2h-matches {
        max-height: 400px;
        overflow-y: auto;
    }
</style>

@code {
    [Parameter] public int FixtureId { get; set; }
    
    private FixtureDetails? fixture = null;
    private bool loading = true;
    private bool error = false;
    
    // Head-to-head data
    private List<FixtureDetails> sameConfigH2H = new();
    private List<FixtureDetails> oppositeConfigH2H = new();
    private bool h2hLoading = false;
    private bool h2hError = false;

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("FixtureDetail page initialized for FixtureId: {FixtureId}", FixtureId);
        await LoadFixtureDetails();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (fixture?.Fixture?.Id != FixtureId)
        {
            await LoadFixtureDetails();
        }
    }

    private async Task LoadFixtureDetails()
    {
        try
        {
            loading = true;
            error = false;
            
            fixture = await FootballApi.GetFixtureByIdAsync(FixtureId);
            
            if (fixture == null)
            {
                error = true;
                Logger.LogWarning("Fixture {FixtureId} not found", FixtureId);
            }
            else
            {
                Logger.LogInformation("Loaded fixture {FixtureId}: {HomeTeam} vs {AwayTeam}", 
                    FixtureId, fixture.Teams?.Home?.Name, fixture.Teams?.Away?.Name);
                
                // Load head-to-head data after fixture is loaded
                _ = LoadHeadToHeadData();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading fixture details for ID: {FixtureId}", FixtureId);
            error = true;
            fixture = null;
        }
        finally
        {
            loading = false;
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/fixtures");
    }

    private string GetPageTitle()
    {
        if (fixture?.Teams?.Home?.Name != null && fixture?.Teams?.Away?.Name != null)
        {
            return $"{fixture.Teams.Home.Name} vs {fixture.Teams.Away.Name} - Fixture Details";
        }
        return "Fixture Details";
    }

    private string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "NS" or "TBD" => "bg-secondary", // Not Started
            "1H" or "HT" or "2H" or "ET" or "BT" or "P" or "SUSP" or "INT" => "bg-success", // Live/In Progress
            "FT" or "AET" or "PEN" => "bg-primary", // Finished
            "PST" or "CANC" or "ABD" => "bg-danger", // Postponed/Cancelled/Abandoned
            "AWD" or "WO" => "bg-warning", // Awarded/Walkover
            _ => "bg-secondary"
        };
    }

    private string GetStatusText(string status)
    {
        return status switch
        {
            "TBD" => "TBD",
            "NS" => "Not Started",
            "1H" => "1st Half",
            "HT" => "Half Time",
            "2H" => "2nd Half",
            "ET" => "Extra Time",
            "BT" => "Break Time",
            "P" => "Penalty",
            "SUSP" => "Suspended",
            "INT" => "Interrupted",
            "FT" => "Full Time",
            "AET" => "After Extra Time",
            "PEN" => "After Penalties",
            "PST" => "Postponed",
            "CANC" => "Cancelled",
            "ABD" => "Abandoned",
            "AWD" => "Technical Loss",
            "WO" => "WalkOver",
            _ => status
        };
    }
    
    private bool HasScoreData(Score score)
    {
        return score?.Halftime?.Home.HasValue == true ||
               score?.Fulltime?.Home.HasValue == true ||
               score?.Extratime?.Home.HasValue == true ||
               score?.Penalty?.Home.HasValue == true;
    }
    
    private async Task LoadHeadToHeadData()
    {
        if (fixture?.Teams?.Home?.Id == null || fixture?.Teams?.Away?.Id == null)
            return;
            
        try
        {
            h2hLoading = true;
            h2hError = false;
            StateHasChanged();
            
            var homeTeamId = fixture.Teams.Home.Id;
            var awayTeamId = fixture.Teams.Away.Id;
            
            Logger.LogInformation("Loading H2H data for {HomeTeam} vs {AwayTeam}", homeTeamId, awayTeamId);
            
            var h2hData = await FootballApi.GetComprehensiveHeadToHeadAsync(homeTeamId, awayTeamId, 5);
            
            sameConfigH2H = h2hData.SameConfiguration;
            oppositeConfigH2H = h2hData.OppositeConfiguration;
            
            Logger.LogInformation("Loaded H2H data: {SameCount} same config, {OppositeCount} opposite config", 
                sameConfigH2H.Count, oppositeConfigH2H.Count);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading head-to-head data for fixture {FixtureId}", FixtureId);
            h2hError = true;
            sameConfigH2H = new List<FixtureDetails>();
            oppositeConfigH2H = new List<FixtureDetails>();
        }
        finally
        {
            h2hLoading = false;
            StateHasChanged();
        }
    }
}
